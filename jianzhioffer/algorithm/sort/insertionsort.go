package sort

// 插入排序, 将后续元素依次插入有序序列中
// 平均时间复杂度为O(n^2), 最好的情况下是O(n), 空间复杂度O(1)
// 当数据正序时, 性能最好, 每次插入都不需要移动前面的元素
// 当数据逆序时, 性能最差, 每次插入都需要移动前面所有的元素
// 所以, 数据越接近有序, 性能越好, 在过程中, 不需要改变相同元素的顺序, 所以是一种稳定排序算法
func InsertionSort(arr []int) {
	if len(arr) <= 1 {
		return
	}
	// 将下标为i的元素插入到0~j序列中
	// 默认将第一个元素作为第一次的有序序列, 所以i从1开始
	for i := 1; i < len(arr); i++ {
		cur := arr[i]
		// 0~j元素都是有序的
		j := i - 1
		for j >= 0 && arr[j] > cur {
			// 如果j元素大于cur, 将j元素往后移
			arr[j+1] = arr[j]
			j--
		}
		// 到这里j元素小于等于cur了, 将cur放到j后面
		arr[j+1] = cur
	}
}
